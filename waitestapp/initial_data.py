# -*- coding: utf-8 -*-
"""
Created on Fri Nov  7 19:10:08 2014

@author: Reed
"""
#
#CHECKING MECHANISM FOR NUMBERS, MAKE SURE THEY ARE SENSIBLE

capacity_json = [{"Provider_Name":"Doctor 1","Hours_Per_Day":"8","Days_Per_Year":"347","Position":"Physician","Team":"Team A"},
                 {"Provider_Name":"Doctor 2","Hours_Per_Day":"8","Days_Per_Year":"347","Position":"Physician","Team":"Team B"},
                 {"Provider_Name":"Doctor 3","Hours_Per_Day":"8","Days_Per_Year":"347","Position":"Physician","Team":"Team C"},
                 {"Provider_Name":"Nurse 1","Hours_Per_Day":"8","Days_Per_Year":"347","Position":"Nurse Practitioner","Team":"Team B"},
                 {"Provider_Name":"Assist. 1","Hours_Per_Day":"8","Days_Per_Year":"347","Position":"Physician Assistant","Team":"Team A"}]                 
                 
aff_json = [{"Provider":"Doctor 1","Patient":"Patient A"},
            {"Provider":"Doctor 1","Patient":"Patient B"},
            {"Provider":"Doctor 2","Patient":"Patient C"},
            {"Provider":"Doctor 2","Patient":"Patient D"},
            {"Provider":"Doctor 3","Patient":"Patient E"},
            {"Provider":"Doctor 3","Patient":"Patient F"}]
            
attr_json = [{"Physician":"Doctor 1", "Males":"900", "Females":"900", "Panel_Size":"1800"},
             {"Physician":"Doctor 2", "Males":"750", "Females":"750", "Panel_Size":"1500"},
             {"Physician":"Doctor 3", "Males":"1050", "Females":"1000", "Panel_Size":"2050"}]


cont_json = [{"Rule":"Gender:M AND Age:0-24 AND Visit:Acute","Continuity":"Share"}]                 

#no initial data for del rules for now, only implemented in scenario
del_json = []##[{"Rule":"Gender:F AND Age:0-24 AND Visit:Acute","Delegation":"Nurse 1"}]

del_json_scenario = [{"Rule":"Gender:F AND Age:0-24 AND Visit:Acute","Delegation":"Nurse 1"}]

pat_json = [{"Patient_Name":"Patient A","Patient_Gender":"M","Age":"24","Chronic_Conditions":"0"},
            {"Patient_Name":"Patient B","Patient_Gender":"F","Age":"58","Chronic_Conditions":"2"},
            {"Patient_Name":"Patient C","Patient_Gender":"F","Age":"12","Chronic_Conditions":"1"},
            {"Patient_Name":"Patient D","Patient_Gender":"M","Age":"74","Chronic_Conditions":"4"}, 
            {"Patient_Name":"Patient E","Patient_Gender":"F","Age":"35","Chronic_Conditions":"2"},
            {"Patient_Name":"Patient F","Patient_Gender":"M","Age":"31","Chronic_Conditions":"1"}]
            
#namcs derived visits per day list, for each category (sex, age, chronic, visittype)
freq_dict = {(1, 3, 2, 1): 0.0043971155659202482,
 (1, 4, 0, 2): 0.0022459644198676112,
 (2, 3, 2, 3): 0.0085401091728966403,
 (1, 6, 1, 3): 0.0076390769013769903,
 (1, 3, 1, 3): 0.0074710362620401764,
 (1, 4, 1, 2): 0.0021368596067377018,
 (2, 2, 2, 1): 0.0035416666666666665,
 (1, 3, 0, 1): 0.0036524153154584844,
 (2, 4, 3, 1): 0.0029750251830352112,
 (1, 4, 1, 1): 0.0041112678983432982,
 (1, 1, 1, 1): 0.0071343568074426454,
 (1, 2, 2, 1): 0.0064289005067804427,
 (1, 4, 2, 3): 0.0085721873321535375,
 (1, 1, 0, 3): 0.0017098354711570054,
 (2, 2, 1, 1): 0.0061687497369860705,
 (1, 4, 3, 1): 0.0036861174651293552,
 (1, 1, 3, 1): 0.018750000000000003,
 (2, 5, 3, 3): 0.008923298974687164,
 (2, 1, 0, 1): 0.0060647964217858301,
 (1, 1, 3, 2): 0.0,
 (2, 1, 1, 3): 0.0047101292325463862,
 (2, 4, 1, 3): 0.0082492755694208112,
 (1, 1, 2, 2): 0.0056249999999999998,
 (1, 5, 1, 2): 0.0016372943438260929,
 (2, 1, 2, 1): 0.0059472318339100346,
 (1, 5, 0, 2): 0.0017438026699581944,
 (2, 1, 2, 2): 0.0029736159169550173,
 (2, 3, 3, 2): 0.0013058529975543656,
 (1, 5, 0, 1): 0.002947589029219658,
 (2, 1, 3, 2): 0.0026944444444444442,
 (2, 5, 0, 1): 0.0023404678321029752,
 (1, 5, 3, 3): 0.009324095893423822,
 (1, 2, 3, 3): 0.0086419753086419745,
 (2, 5, 1, 3): 0.0080590042428761183,
 (2, 3, 3, 3): 0.0091860003965893323,
 (1, 5, 2, 1): 0.0028807198105608445,
 (1, 2, 0, 1): 0.0038835921857997978,
 (2, 4, 2, 3): 0.0080480727482896974,
 (2, 3, 2, 2): 0.0012421976978758752,
 (2, 6, 3, 3): 0.0093481424196646627,
 (1, 2, 0, 2): 0.0048861008663202109,
 (2, 5, 0, 2): 0.001225959340625368,
 (1, 2, 1, 2): 0.0042048213914643558,
 (1, 6, 2, 2): 0.0012931258923322417,
 (2, 2, 0, 1): 0.0040679503844885598,
 (1, 6, 3, 2): 0.0013977768551908243,
 (2, 3, 3, 1): 0.0042777943023332675,
 (2, 5, 2, 1): 0.0026866330630433192,
 (1, 6, 3, 1): 0.0031125752651671957,
 (1, 3, 3, 1): 0.0043909808871198837,
 (2, 2, 0, 2): 0.0016044621062729747,
 (1, 6, 0, 3): 0.0056486115908527292,
 (1, 3, 2, 3): 0.0078484364629444435,
 (2, 3, 0, 1): 0.0046223449907738809,
 (1, 6, 1, 1): 0.0027342821381312475,
 (1, 3, 1, 1): 0.0046858339435515992,
 (1, 4, 0, 1): 0.0032132857294145532,
 (2, 5, 1, 2): 0.0014780235358420725,
 (1, 3, 1, 2): 0.0034067925354903206,
 (2, 4, 1, 2): 0.0016947152227208917,
 (1, 4, 1, 3): 0.0089389877506025495,
 (1, 1, 1, 3): 0.0047394313773823932,
 (2, 5, 1, 1): 0.0026216037898512674,
 (1, 3, 0, 2): 0.0051405187539735426,
 (1, 4, 2, 1): 0.0040269051110485279,
 (2, 5, 2, 3): 0.0068908203667178026,
 (2, 3, 0, 3): 0.0048958565286894946,
 (1, 4, 2, 2): 0.0020292567357089123,
 (2, 5, 3, 1): 0.0021570784711537152,
 (2, 1, 0, 3): 0.0021270143884648371,
 (1, 4, 3, 2): 0.0016449449274355753,
 (2, 6, 2, 2): 0.001331752744670853,
 (2, 3, 0, 2): 0.0012964446897200117,
 (2, 2, 1, 3): 0.0098462736186508415,
 (1, 1, 2, 3): 0.0093749999999999997,
 (1, 5, 1, 1): 0.0032844519065908968,
 (2, 4, 0, 2): 0.0014932774143977402,
 (1, 5, 0, 3): 0.0048938978156891268,
 (1, 2, 2, 3): 0.008571867342373923,
 (2, 4, 0, 1): 0.0031433077065499398,
 (2, 6, 2, 1): 0.0024538777424953678,
 (2, 2, 1, 2): 0.0015817307017913001,
 (1, 5, 3, 1): 0.0031471078015521416,
 (2, 1, 3, 3): 0.013472222222222221,
 (2, 3, 1, 1): 0.0040595356325259947,
 (2, 6, 0, 2): 0.001378489826447478,
 (1, 5, 3, 2): 0.0014608351399754925,
 (2, 4, 2, 1): 0.0029841168617253931,
 (2, 6, 1, 1): 0.0024081017954891829,
 (1, 5, 2, 2): 0.0016794479867237313,
 (2, 3, 1, 2): 0.0014498341544735697,
 (1, 2, 1, 3): 0.0065700334241630565,
 (1, 6, 2, 1): 0.0033993536715097566,
 (1, 6, 3, 3): 0.0087252977919385979,
 (1, 3, 3, 3): 0.0092148753828290506,
 (2, 3, 2, 1): 0.0039336260432736043,
 (2, 6, 1, 3): 0.007888609330050771,
 (1, 6, 0, 1): 0.002830798452427345,
 (1, 6, 0, 2): 0.0015971936222411165,
 (2, 6, 1, 2): 0.0012248103959815672,
 (1, 4, 0, 3): 0.0041889460157679336,
 (1, 6, 1, 2): 0.0013436506726899257,
 (2, 4, 3, 3): 0.009320803364426233,
 (2, 2, 2, 2): 0.00094444444444444437,
 (2, 6, 0, 3): 0.0051401315562448341,
 (1, 1, 1, 2): 0.0033024761193462425,
 (2, 2, 0, 3): 0.0032799181110536031,
 (1, 3, 0, 3): 0.0031852976441757307,
 (1, 1, 0, 2): 0.0048148966867781274,
 (2, 5, 2, 2): 0.001382660530352838,
 (2, 6, 0, 1): 0.0017873639275124082,
 (1, 1, 0, 1): 0.0060131493849649581,
 (2, 5, 3, 2): 0.0014103974619081984,
 (2, 1, 0, 2): 0.0047079958766260066,
 (2, 2, 3, 3): 0.0097304404996712696,
 (1, 4, 3, 3): 0.0096415385162829693,
 (1, 1, 3, 3): 0.010416666666666666,
 (2, 1, 1, 2): 0.0031961591220850479,
 (1, 1, 2, 1): 0.0037500000000000003,
 (1, 5, 1, 3): 0.0075650889259916464,
 (2, 1, 1, 1): 0.0064764276947512816,
 (2, 2, 3, 2): 0.0,
 (2, 4, 1, 1): 0.0034293060977410991,
 (2, 1, 2, 3): 0.0094615051903114162,
 (2, 4, 0, 3): 0.0050944685270199151,
 (2, 1, 3, 1): 0.010777777777777777,
 (2, 2, 3, 1): 0.0060815253122945435,
 (1, 2, 3, 2): 0.00308641975308642,
 (2, 4, 3, 2): 0.0015334452843673181,
 (2, 6, 3, 1): 0.0026174798775061054,
 (1, 2, 3, 1): 0.0049382716049382715,
 (2, 4, 2, 2): 0.0016416120731169994,
 (2, 6, 2, 3): 0.0075342678425360295,
 (1, 5, 2, 3): 0.0079190637707320377,
 (1, 2, 0, 3): 0.0024520820428945234,
 (1, 2, 1, 1): 0.0049527944274459961,
 (1, 6, 2, 3): 0.0076509948629657626,
 (1, 2, 2, 2): 0.0047451408502427071,
 (2, 3, 1, 3): 0.0093833266477529442,
 (2, 2, 2, 3): 0.0096805555555555551,
 (1, 3, 3, 2): 0.0024119472478545839,
 (2, 6, 3, 2): 0.0012220986187659168,
 (1, 3, 2, 2): 0.002970127118112168,
 (2, 5, 0, 3): 0.0055948326272175879}
 
durs_dict = {(1, 3, 2, 1): 20.513207547169813,
 (1, 4, 0, 2): 19.707920792079207,
 (2, 3, 2, 3): 22.509090909090908,
 (1, 6, 1, 3): 18.810578105781058,
 (1, 3, 1, 3): 23.394400000000001,
 (1, 4, 1, 2): 21.23391812865497,
 (2, 2, 2, 1): 18.666666666666668,
 (1, 3, 0, 1): 18.989037758830694,
 (2, 4, 3, 1): 20.883610451306414,
 (1, 4, 1, 1): 19.84599797365755,
 (1, 1, 1, 1): 17.837455830388691,
 (1, 2, 2, 1): 23.595238095238095,
 (1, 4, 2, 3): 21.473451327433629,
 (1, 1, 0, 3): 19.889600000000002,
 (2, 2, 1, 1): 18.762820512820515,
 (1, 4, 3, 1): 20.71498371335505,
 (1, 1, 3, 1): 18.0,
 (2, 5, 3, 3): 20.186983471074381,
 (2, 1, 0, 1): 15.863751051303616,
 (2, 6, 1, 2): 20.508474576271187,
 (2, 1, 1, 3): 22.335714285714285,
 (2, 4, 1, 3): 22.167371601208458,
 (1, 1, 2, 2): 19.916666666666668,
 (1, 5, 1, 2): 19.421686746987952,
 (2, 1, 2, 1): 17.90909090909091,
 (1, 5, 0, 2): 19.967741935483872,
 (2, 1, 2, 2): 29.90909090909091,
 (2, 3, 3, 2): 22.448275862068964,
 (1, 5, 0, 1): 18.725190839694658,
 (2, 1, 3, 2): 20.0,
 (2, 5, 0, 1): 18.542857142857144,
 (1, 5, 3, 3): 20.871373307543521,
 (1, 2, 3, 3): 28.0,
 (2, 3, 3, 3): 20.441176470588236,
 (1, 5, 2, 1): 21.036437246963562,
 (1, 2, 0, 1): 18.397674418604652,
 (2, 4, 2, 3): 20.210025929127053,
 (2, 3, 2, 2): 23.041666666666668,
 (2, 6, 3, 3): 19.720975609756099,
 (1, 2, 0, 2): 17.105360443622921,
 (2, 5, 0, 2): 18.154545454545456,
 (1, 2, 1, 2): 19.389423076923077,
 (1, 6, 2, 2): 20.287878787878789,
 (2, 2, 0, 1): 16.921465968586386,
 (1, 6, 3, 2): 22.953608247422679,
 (2, 3, 3, 1): 21.547368421052632,
 (2, 5, 2, 1): 19.91213389121339,
 (1, 6, 3, 1): 21.039351851851851,
 (1, 3, 3, 1): 20.140845070422536,
 (2, 2, 0, 2): 19.26991150442478,
 (1, 6, 0, 3): 19.52183908045977,
 (1, 3, 2, 3): 21.835095137420719,
 (2, 3, 0, 1): 18.336094674556215,
 (1, 6, 1, 1): 19.446735395189002,
 (1, 3, 1, 1): 19.554846938775512,
 (1, 4, 0, 1): 19.179065743944637,
 (2, 5, 1, 2): 18.970802919708028,
 (1, 3, 1, 2): 19.392982456140352,
 (2, 4, 1, 2): 21.555882352941175,
 (1, 4, 1, 3): 22.53821062441752,
 (1, 1, 1, 3): 21.968085106382979,
 (2, 5, 1, 1): 19.02469135802469,
 (1, 3, 0, 2): 17.536996971008222,
 (1, 4, 2, 1): 19.178963893249609,
 (2, 5, 2, 3): 19.099510603588907,
 (2, 3, 0, 3): 21.762011173184359,
 (1, 4, 2, 2): 21.560747663551403,
 (2, 5, 3, 1): 20.572649572649574,
 (2, 1, 0, 3): 20.928057553956833,
 (1, 4, 3, 2): 21.200729927007298,
 (2, 6, 2, 2): 24.703703703703702,
 (2, 3, 0, 2): 21.679324894514767,
 (2, 2, 1, 3): 28.642570281124499,
 (1, 1, 2, 3): 26.199999999999999,
 (1, 5, 1, 1): 20.207207207207208,
 (2, 4, 0, 2): 20.052486187845304,
 (1, 5, 0, 3): 20.071264367816092,
 (1, 2, 2, 3): 25.089285714285715,
 (2, 4, 0, 1): 18.784776902887138,
 (2, 6, 2, 1): 21.100502512562816,
 (2, 2, 1, 2): 23.600000000000001,
 (1, 5, 3, 1): 20.822349570200572,
 (2, 1, 3, 3): 21.0,
 (2, 3, 1, 1): 19.188571428571429,
 (2, 6, 0, 2): 19.440677966101696,
 (1, 5, 3, 2): 21.987654320987655,
 (2, 4, 2, 1): 19.482517482517483,
 (2, 6, 1, 1): 21.922413793103448,
 (1, 5, 2, 2): 21.729166666666668,
 (2, 3, 1, 2): 19.751999999999999,
 (1, 2, 1, 3): 25.258461538461539,
 (1, 6, 2, 1): 20.155619596541786,
 (1, 6, 3, 3): 20.447563996696946,
 (1, 3, 3, 3): 21.476510067114095,
 (2, 3, 2, 1): 18.157894736842106,
 (2, 6, 1, 3): 19.892105263157895,
 (1, 6, 0, 1): 19.045871559633028,
 (1, 6, 0, 2): 20.626016260162601,
 (1, 4, 0, 3): 20.706702057067019,
 (1, 6, 1, 2): 19.447552447552447,
 (2, 4, 3, 3): 21.11751326762699,
 (2, 2, 2, 2): 31.25,
 (2, 6, 0, 3): 18.584090909090911,
 (1, 1, 1, 2): 20.290076335877863,
 (2, 2, 0, 3): 21.450216450216452,
 (1, 3, 0, 3): 20.722067039106147,
 (1, 1, 0, 2): 19.237500000000001,
 (2, 5, 2, 2): 23.105691056910569,
 (2, 6, 0, 1): 18.869281045751634,
 (1, 1, 0, 1): 15.98498635122839,
 (2, 5, 3, 2): 21.411764705882351,
 (2, 1, 0, 2): 18.883531960996748,
 (2, 2, 3, 3): 18.125,
 (1, 4, 3, 3): 21.48692403486924,
 (1, 1, 3, 3): 26.0,
 (2, 1, 1, 2): 20.005263157894738,
 (1, 1, 2, 1): 20.75,
 (1, 5, 1, 3): 21.490221642764016,
 (2, 1, 1, 1): 16.124675324675323,
 (2, 4, 1, 1): 20.388081395348838,
 (2, 5, 1, 3): 20.658634538152612,
 (2, 1, 2, 3): 23.085714285714285,
 (2, 4, 0, 3): 20.218623481781375,
 (2, 1, 3, 1): 16.75,
 (2, 2, 3, 1): 17.0,
 (1, 2, 3, 2): 21.600000000000001,
 (2, 4, 3, 2): 22.368663594470046,
 (2, 6, 3, 1): 22.735191637630663,
 (1, 2, 3, 1): 17.5,
 (2, 4, 2, 2): 23.254237288135592,
 (2, 6, 2, 3): 19.725040916530279,
 (1, 5, 2, 3): 20.341678939617083,
 (1, 2, 0, 3): 20.314917127071823,
 (1, 2, 1, 1): 18.024489795918367,
 (1, 6, 2, 3): 19.542893725992318,
 (1, 2, 2, 2): 21.0,
 (2, 3, 1, 3): 24.614338689740421,
 (2, 2, 2, 3): 23.878048780487806,
 (1, 3, 3, 2): 20.128205128205128,
 (2, 6, 3, 2): 21.059701492537314,
 (1, 3, 2, 2): 20.670391061452513,
 (2, 5, 0, 3): 18.723107569721115}

#get avg freq/dur for each visit type
def dict_sum(stats):
    num_acutes = 0
    num_prev = 0
    num_chronic = 0
    sum_acutes = 0
    sum_prev = 0
    sum_chronic = 0
    for key in stats:
        if key[3] == 1:
            num_acutes +=1
            sum_acutes += stats[key]
        elif key[3] == 2:
            num_prev +=1
            sum_prev += stats[key]
        else:
            num_chronic +=1
            sum_chronic += stats[key]
            
    return (sum_acutes/num_acutes, sum_prev/num_prev, sum_chronic/num_chronic)
    
avg_durs = dict_sum(durs_dict)
avg_freqs = dict_sum(freq_dict)

male_cats = ['2,1,0',
 '2,4,1',
 '2,4,0',
 '2,3,0',
 '2,4,3',
 '2,4,2',
 '2,6,3',
 '2,5,3',
 '2,3,1',
 '2,2,0',
 '2,5,1',
 '2,6,1',
 '2,5,2',
 '2,6,2',
 '2,1,1',
 '2,5,0',
 '2,6,0',
 '2,3,2',
 '2,2,1',
 '2,3,3',
 '2,1,2',
 '2,2,2',
 '2,2,3',
 '2,1,3']



male_p = [0.17337355179269212,
 0.091965448687187215,
 0.080859669568794132,
 0.067765818879824496,
 0.067080276958936036,
 0.06245286899293892,
 0.049564680880235829,
 0.046445465140193321,
 0.04401179132103928,
 0.043223418112017548,
 0.038630287242064854,
 0.038047576609309658,
 0.033420168643312535,
 0.031466374168780419,
 0.029306917117981765,
 0.028175772948515802,
 0.024371015287584837,
 0.018166860903544253,
 0.015253307739768287,
 0.011242887502570782,
 0.0023308425310207721,
 0.0020566257626653869,
 0.00044560224857750051,
 0.00034277096044423114]


female_cats = ['1,3,0',
 '1,1,0',
 '1,4,1',
 '1,4,0',
 '1,3,1',
 '1,4,3',
 '1,2,0',
 '1,4,2',
 '1,6,3',
 '1,5,3',
 '1,5,1',
 '1,6,2',
 '1,6,1',
 '1,5,2',
 '1,3,2',
 '1,5,0',
 '1,2,1',
 '1,6,0',
 '1,1,1',
 '1,3,3',
 '1,2,2',
 '1,1,2',
 '1,2,3',
 '1,1,3']

 
female_p = [0.13509784244856998,
 0.11497742097340692,
 0.091470145509282494,
 0.08707977922729554,
 0.065328650275965877,
 0.06256899147014551,
 0.06234320120421475,
 0.058053186151530357,
 0.046086302057200199,
 0.038760662318113398,
 0.031761164074259912,
 0.03161063723030607,
 0.031284495735072755,
 0.02684395383843452,
 0.02300551931761164,
 0.021374811841445056,
 0.019518314099347716,
 0.019468138484696439,
 0.015102860010035123,
 0.012995484194681385,
 0.0032363271450075262,
 0.0010035122930255895,
 0.00067737079779227295,
 0.00035122930255895634]

#proportions of eac catgory (sex,age, num chronic)
full_p =[0.078005040994292674,
 0.073268244633079349,
 0.066387577135904041,
 0.052814555146739287,
 0.050279572384622072,
 0.03886490714720283,
 0.037720543500304196,
 0.036127125764116232,
 0.03599675522206449,
 0.034171567633340096,
 0.033519714923081381,
 0.028638062404032796,
 0.028348350088362256,
 0.02661007619433902,
 0.026392791957586117,
 0.022380276385549149,
 0.020946200422979983,
 0.019628009386679027,
 0.018599530666048615,
 0.018338789581945129,
 0.018266361503027493,
 0.018251875887243967,
 0.018063562882058116,
 0.01632528898803488,
 0.016079033519714923,
 0.015499608888373845,
 0.014123475388938784,
 0.013297795289277747,
 0.013283309673494221,
 0.01238520149491555,
 0.012341744647564969,
 0.01190717617405916,
 0.011269809079583974,
 0.011240837848016919,
 0.010299272822087667,
 0.0087203407016832289,
 0.0076773763652692876,
 0.0075035489758669641,
 0.0064460990236694963,
 0.0047512819769968424,
 0.0018686444360749776,
 0.0009850218732798332,
 0.00086913694701161752,
 0.00057942463134107831,
 0.00039111162615522785,
 0.00020279862096937742,
 0.00018831300518585046,
 0.00014485615783526958]


full_cats = [(1, 3, 0),
 (2, 1, 0),
 (1, 1, 0),
 (1, 4, 1),
 (1, 4, 0),
 (2, 4, 1),
 (1, 3, 1),
 (1, 4, 3),
 (1, 2, 0),
 (2, 4, 0),
 (1, 4, 2),
 (2, 3, 0),
 (2, 4, 3),
 (1, 6, 3),
 (2, 4, 2),
 (1, 5, 3),
 (2, 6, 3),
 (2, 5, 3),
 (2, 3, 1),
 (1, 5, 1),
 (2, 2, 0),
 (1, 6, 2),
 (1, 6, 1),
 (2, 5, 1),
 (2, 6, 1),
 (1, 5, 2),
 (2, 5, 2),
 (2, 6, 2),
 (1, 3, 2),
 (2, 1, 1),
 (1, 5, 0),
 (2, 5, 0),
 (1, 2, 1),
 (1, 6, 0),
 (2, 6, 0),
 (1, 1, 1),
 (2, 3, 2),
 (1, 3, 3),
 (2, 2, 1),
 (2, 3, 3),
 (1, 2, 2),
 (2, 1, 2),
 (2, 2, 2),
 (1, 1, 2),
 (1, 2, 3),
 (1, 1, 3),
 (2, 2, 3),
 (2, 1, 3)]
 
full_cats_str = ['1,3,0',
 '2,1,0',
 '1,1,0',
 '1,4,1',
 '1,4,0',
 '2,4,1',
 '1,3,1',
 '1,4,3',
 '1,2,0',
 '2,4,0',
 '1,4,2',
 '2,3,0',
 '2,4,3',
 '1,6,3',
 '2,4,2',
 '1,5,3',
 '2,6,3',
 '2,5,3',
 '2,3,1',
 '1,5,1',
 '2,2,0',
 '1,6,2',
 '1,6,1',
 '2,5,1',
 '2,6,1',
 '1,5,2',
 '2,5,2',
 '2,6,2',
 '1,3,2',
 '2,1,1',
 '1,5,0',
 '2,5,0',
 '1,2,1',
 '1,6,0',
 '2,6,0',
 '1,1,1',
 '2,3,2',
 '1,3,3',
 '2,2,1',
 '2,3,3',
 '1,2,2',
 '2,1,2',
 '2,2,2',
 '1,1,2',
 '1,2,3',
 '1,1,3',
 '2,2,3',
 '2,1,3']

 
def adjust_ratios(full_p = full_p, full_cats=full_cats, sex=[50,50], age=[15,15,20,20,15,15],chronic=[50,20,15,15]):
 
    if sex:
     #initialize dictionary of category idenifier and values[current proportion, requested proportion, multiplicative factor]
        divisions={i+1:[0,perc*.01,0] for i,perc in enumerate(sex)}
        new_p = adjust_category(0, divisions, full_cats, full_p)
        if new_p: #if no errors, replace proportions with adjusted proportions
            full_p=new_p
    if age:
        #initialize dictionary of category idenifier and values[current proportion, requested proportion, multiplicative factor]
        divisions={i+1:[0,perc*.01,0] for i,perc in enumerate(age)}
        new_p = adjust_category(1, divisions, full_cats, full_p)
        if new_p: #if no errors, replace proportions with adjusted proportions
            full_p=new_p
    
    if chronic:
        #initialize dictionary of category idenifier and values[current proportion, requested proportion, multiplicative factor]
        divisions={i:[0,perc*.01,0] for i,perc in enumerate(chronic)}
        new_p = adjust_category(2, divisions, full_cats, full_p)
        if new_p: #if no errors, replace proportions with adjusted proportions
            full_p=new_p
        
    return full_p
    
            
def adjust_category(category, divisions, full_cats, full_p ):
    #category: specific trait (e.g. integer code for male) divisions: dictionary of proportions for e..g. sex      
    #add up current  total proportion for each category       
    for cat, proportion in zip(full_cats, full_p):
        
        divisions[cat[category]][0] += proportion
    for entry in divisions:        
        try:
           divisions[entry][2] =  divisions[entry][1]/divisions[entry][0]    
        except ZeroDivisionError:
            print("Divide by zero in category adjustment!")
            return False
    #multiply proportions of categories by expansion factor from above above, depending on category of divisions
    new_p = [] #initiialize
    for cat, proportion in zip(full_cats, full_p):
        new_p.append(proportion*divisions[cat[category]][2])
    return new_p
         
